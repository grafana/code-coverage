name: Code Coverage
on:
  workflow_call:
    inputs:
      frontend-path-regexp:
        description: Regexp to match valid frontend paths
        required: true
        type: string
      backend-path-regexp:
        description: Regexp to match valid backend paths
        required: true
        type: string

jobs:
  comment-coverage-difference:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Changed files
        id: changed
        run: |
          echo "::set-output name=all::$(git diff --name-only ${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.ref }} | xargs)"
      - name: Get paths
        id: relevant-paths
        run: |
          echo "::set-output name=frontend-paths::$(echo ${{ steps.changed.outputs.all }} | grep -Eo '${{ inputs.frontend-path-regexp }}' | sort -u )"
          echo "::set-output name=backend-paths::$(echo ${{ steps.changed.outputs.all }} | grep -Eo '${{ inputs.backend-path-regexp }}' | sort -u )"

      - uses: actions/setup-node@v2
        with:
          node-version: 17.x
          cache: yarn
      - name: yarn install for caller's PR
        run: yarn install
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17.8"
      - name: generate go for github.com/grafana/grafana
        if: github.repository == 'grafana/grafana'
        run: make gen-go

      - name: Get go coverage for caller's PR
        id: pr-backend
        run: |
          PATHS=${{ steps.relevant-paths.outputs.backend-paths }}
          ## Create directory for backend coverage output
          mkdir backend_coverage
          CMD=('go' 'test' '-coverprofile')
          PLUGIN_COVERAGE=""
          for i in "${!PATHS[@]}"; do
              ## Identify plugin
              PLUGIN=$(echo ${PATHS[i]} | awk -F '/' '{ print $NF }')
              echo "Running backend coverage check for: $PLUGIN"
              FULL_CMD="${CMD[*]} backend_coverage/$PLUGIN.cov ./${PATHS[i]}"
              ## This command generates the HTML report
              HTML_CMD=('go' 'tool' 'cover' "-html=backend_coverage/$PLUGIN.cov" "-o backend_coverage/$PLUGIN.html")
              RESULT=$($FULL_CMD)
              $(${HTML_CMD[*]})
              ## Retrieve coverage from result
              PLUGIN_COVERAGE="$PLUGIN_COVERAGE$PLUGIN | $(echo $RESULT | cut -d ':' -f 2 | grep -Eo '[0-9]+\.[0-9]+') + "
          done
          echo "::set-output name=coverage::$(echo -e $PLUGIN_COVERAGE)"
      - name: Get TypeScript coverage for caller's PR
        id: pr-frontend
        run: |
          PATHS=${{ steps.relevant-paths.outputs.frontend-paths }}
          ## Coverage paths are slightly differently formatted compared to test paths
          COVERAGE_PATHS=""
          declare -a TEST_PATHS=()
          CMD=('jest' '--coverage' '--collectCoverageFrom=')
          for i in "${!PATHS[@]}"; do
              ## Identify which plugin path has been passed in
              PLUGIN=$(echo ${PATHS[i]} | awk -F '/' '{ print $NF }')
              echo "Running frontend coverage check for: $PLUGIN"
              ## If this is the last element do not append a comma
              if [ $i -lt $((${#PATHS[@]} - 1)) ]; then
                  COVERAGE_PATHS="$COVERAGE_PATHS\"${PATHS[i]}/**\","
              else
                  COVERAGE_PATHS="$COVERAGE_PATHS\"${PATHS[i]}/**\""
              fi
              TEST_PATHS+=("--testPathPattern=\"${PATHS[i]}/*\"")
          done
          FULL_CMD="${CMD[*]}'[$COVERAGE_PATHS]' ${TEST_PATHS[*]}"
          RESULT=$(yarn exec $FULL_CMD)

          PLUGIN_COVERAGE=""
          ## Set field delimiter so that we can easily split the path
          IFS='/'
          for i in "${!PATHS[@]}"; do
              read -a splitpath <<<${PATHS[i]}
              ## Retrive line coverage from result
              PLUGIN_COVERAGE="$PLUGIN_COVERAGE$(echo $RESULT | grep ${splitpath[-1]} | head -1 | cut -d '|' -f 1,5) + "
          done
          echo "::set-output name=coverage::$(echo -e $PLUGIN_COVERAGE)"

      - uses: actions/checkout@v3
        with:
          ref: main
      - name: yarn install for caller's main
        run: yarn install
      - name: generate go for github.com/grafana/grafana
        if: github.repository == 'grafana/grafana'
        run: make gen-go

      - name: Get go coverage on caller's main
        id: main-backend
        run: |
          PATHS=${{ steps.relevant-paths.outputs.backend-paths }}
          ## Create directory for backend coverage output
          mkdir backend_coverage
          CMD=('go' 'test' '-coverprofile')
          PLUGIN_COVERAGE=""
          for i in "${!PATHS[@]}"; do
              ## Identify plugin
              PLUGIN=$(echo ${PATHS[i]} | awk -F '/' '{ print $NF }')
              echo "Running backend coverage check for: $PLUGIN"
              FULL_CMD="${CMD[*]} backend_coverage/$PLUGIN.cov ./${PATHS[i]}"
              ## This command generates the HTML report
              HTML_CMD=('go' 'tool' 'cover' "-html=backend_coverage/$PLUGIN.cov" "-o backend_coverage/$PLUGIN.html")
              RESULT=$($FULL_CMD)
              $(${HTML_CMD[*]})
              ## Retrieve coverage from result
              PLUGIN_COVERAGE="$PLUGIN_COVERAGE$PLUGIN | $(echo $RESULT | cut -d ':' -f 2 | grep -Eo '[0-9]+\.[0-9]+') + "
          done
          echo "::set-output name=coverage::$(echo -e $PLUGIN_COVERAGE)"
      - name: Get TypeScript coverage on caller's main
        id: main-frontend
        run: |
          PATHS=${{ steps.relevant-paths.outputs.frontend-paths }}
           ## Coverage paths are slightly differently formatted compared to test paths
           COVERAGE_PATHS=""
           declare -a TEST_PATHS=()
           CMD=('jest' '--coverage' '--collectCoverageFrom=')
           for i in "${!PATHS[@]}"; do
               ## Identify which plugin path has been passed in
               PLUGIN=$(echo ${PATHS[i]} | awk -F '/' '{ print $NF }')
               echo "Running frontend coverage check for: $PLUGIN"
               ## If this is the last element do not append a comma
               if [ $i -lt $((${#PATHS[@]} - 1)) ]; then
                   COVERAGE_PATHS="$COVERAGE_PATHS\"${PATHS[i]}/**\","
               else
                   COVERAGE_PATHS="$COVERAGE_PATHS\"${PATHS[i]}/**\""
               fi
               TEST_PATHS+=("--testPathPattern=\"${PATHS[i]}/*\"")
           done
           FULL_CMD="${CMD[*]}'[$COVERAGE_PATHS]' ${TEST_PATHS[*]}"
           RESULT=$(yarn exec $FULL_CMD)

           PLUGIN_COVERAGE=""
           ## Set field delimiter so that we can easily split the path
           IFS='/'
           for i in "${!PATHS[@]}"; do
               read -a splitpath <<<${PATHS[i]}
               ## Retrive line coverage from result
               PLUGIN_COVERAGE="$PLUGIN_COVERAGE$(echo $RESULT | grep ${splitpath[-1]} | head -1 | cut -d '|' -f 1,5) + "
           done
           echo "::set-output name=coverage::$(echo -e $PLUGIN_COVERAGE)"

      - name: Archive backend code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: backend-code-coverage-report
          path: backend_coverage
      - name: Archive frontend code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-code-coverage-report
          path: coverage/lcov-report

      - name: Create comments
        run: |
          IFS="+"
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_FRONTEND_COVERAGE=(${{ steps.pr-frontend.outputs.coverage }})
          PR_BACKEND_COVERAGE=(${{ steps.pr-backend.outputs.coverage }})
          MAIN_FRONTEND_COVERAGE=(${{ steps.main-frontend.outputs.coverage }})
          MAIN_BACKEND_COVERAGE=(${{ steps.main-backend.outputs.coverage }})

          COMMENT="code coverage report for PR #$PR_NUMBER\n| Plugin |          Main                       |   PR   | Difference |\n| ------ | ----------------------------------- | ------ | ---------- |\n"

          generate_comment() {
            PR_ARRAY=$1
            MAIN_ARRAY=$2
            for i in "${!PR_ARRAY[@]}"; do
                CURR_PR_LINE=${PR_ARRAY[i]}
                CURR_MAIN_LINE=${MAIN_ARRAY[i]}
                PLUGIN=$(echo $CURR_PR_LINE | cut -d '|' -f 1 | xargs)
                PR_COV=$(echo $CURR_PR_LINE | cut -d '|' -f 2 | xargs)
                MAIN_COV=$(echo $CURR_MAIN_LINE | cut -d '|' -f 2 | xargs)
                COMMENT="$COMMENT|  $PLUGIN |   $MAIN_COV%  |   $PR_COV%    |   $(bc <<<"$PR_COV - $MAIN_COV")% |\n"
            done
          }

          echo "Creating frontend comment"
          generate_comment $PR_FRONTEND_COVERAGE $MAIN_FRONTEND_COVERAGE
          echo "frontend-cov-comment=$(echo -e "Frontend $COMMENT")" >> $GITHUB_ENV

          echo "Creating backend comment"
          generate_comment $PR_BACKEND_COVERAGE $MAIN_BACKEND_COVERAGE
          echo -e "Backend $COMMENT"
          echo "backend-cov-comment=$(echo -e "Backend $COMMENT")" >> $GITHUB_ENV

      - name: Find previous backend comment, if any
        uses: peter-evans/find-comment@v2
        id: find-backend-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: |
            Backend code coverage report for PR #${{ github.event.pull_request.number }}
      - name: Find previous frontend comment, if any
        uses: peter-evans/find-comment@v2
        id: find-frontend-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: |
            Frontend code coverage report for PR #${{ github.event.pull_request.number }}

      - name: Create or update backend comment
        uses: peter-evans/create-or-update-comment@v2
        # Check if the event is not triggered by a fork
        if: github.event.pull_request.head.repo.full_name == github.repository
        with:
          comment-id: ${{ steps.find-backend-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ env.backend-cov-comment }}
          edit-mode: replace
      - name: Create or update frontend comment
        uses: peter-evans/create-or-update-comment@v2
        # Check if the event is not triggered by a fork
        if: github.event.pull_request.head.repo.full_name == github.repository
        with:
          comment-id: ${{ steps.find-frontend-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ env.frontend-cov-comment }}
          edit-mode: replace
